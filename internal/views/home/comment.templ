package home

// import "github.com/muhhae/lorem-ipsum/internal/database/comment"
import "github.com/muhhae/lorem-ipsum/internal/views/util"
import "strings"
import "net/url"
import "go.mongodb.org/mongo-driver/bson/primitive"

// import "fmt"

type CommentData struct {
	PostID     string
	CommentID  string
	ParentID   string
	Content    string
	Username   string
	ReplyCount int
}

templ LoadedComment(comments []CommentData) {
	<div>
		for _, comment := range comments {
			@Comment(comment)
		}
		if len(comments) > 0 {
			@buttonCommentLoader(nextLoaderURL(comments[len(comments)-1])) {
			}
		}
	</div>
}

templ Comment(c CommentData) {
	<div class="flex">
		<div class="p-2 divider divider-start divider-horizontal">
			<div class="avatar placeholder">
				<div class="bg-neutral text-2xl text-neutral-content rounded-full w-12">
					<span>{ strings.ToUpper(string([]rune(c.Username)[0])) }</span>
				</div>
			</div>
		</div>
		<div class="w-full ml-3 mb-2 py-2">
			<div>
				<div class="text-md font-black">
					{ c.Username }
				</div>
				<div class="text-sm">
					{ c.Content }
				</div>
			</div>
			@LoadCommentBtn(c) {
			}
		</div>
	</div>
}

templ CommentInput(url string, reply bool) {
	<div>
		if !reply {
			<button x-on:click="inputToggle()" class="btn btn-outline w-full my-4 text-xl">Add Comment</button>
		}
		<form
			hx-post={ url }
			hx-swap="none"
			class="w-full join join-vertical"
			x-show="inputOpen"
			x-on:htmx:before-request="loading = true"
			x-on:htmx:after-request="$event.target.reset();loading = false;htmx.trigger($refs.commentCount, 'update');htmx.trigger($refs.loader, 'update');"
		>
			<textarea name="content" class="join-item mt-2 textarea textarea-bordered w-full" rows="3" placeholder="Comment..."></textarea>
			<div x-show="loading" class="join-item btn btn-outline text-lg">
				<span class="loading loading-lg loading-dots mx-auto "></span>
			</div>
			if reply {
				<button x-show="!loading" type="submit" class="join-item btn btn-outline btn-xs w-full text-sm">Send</button>
			} else {
				<button x-show="!loading" type="submit" class="join-item mb-2 btn btn-outline w-full text-lg">Send</button>
			}
		</form>
	</div>
}

templ LoadCommentBtn(c CommentData) {
	<div
		x-data="{ 
			open: false,
			showText: 'Show',
			toggle() {
				this.open = !this.open;
				if (this.open) {
					this.showText = 'Hide';
				} else {
					this.showText = 'Show';
				}
			},
			loading: false,
			inputOpen: false,
			inputToggle() {
				this.inputOpen = !this.inputOpen;
			},
		}"
	>
		<div x-show="open">
			@commentLoader(loaderURL(c)) {
			}
		</div>
		if c.CommentID != "" && c.CommentID != primitive.NilObjectID.Hex() {
			<div class="w-full divider divider-end">
				<button x-on:click="inputToggle()" class="btn btn-xs btn-ghost text-xs">Reply</button>
				<button
					x-on:click="toggle()"
					class="btn btn-ghost btn-xs"
				>
					<span x-text="showText"></span>
					<span
						hx-get={ commentCountURL(c) }
						hx-swap="innerHTML"
						hx-trigger="update, intersect"
						x-ref="commentCount"
						x-init="periodicIntersectUpdateObserver.observe($el)"
					>{  util.Format(c.ReplyCount) }</span>
					<span>Replies</span>
				</button>
			</div>
		} else {
			<div class=" divider">
				<button
					x-on:click="toggle()"
					class="btn btn-ghost btn-xs"
				>
					<span x-text="showText"></span>
					<span
						hx-get={ commentCountURL(c) }
						hx-swap="innerHTML"
						hx-trigger="update, intersect"
						x-ref="commentCount"
						x-init="periodicIntersectUpdateObserver.observe($el)"
					>{  util.Format(c.ReplyCount) }</span>
					<span>Comments</span>
				</button>
			</div>
		}
		@CommentInput(commentInputURL(c), c.CommentID != "" && c.CommentID != primitive.NilObjectID.Hex()) {
		}
	</div>
}

templ commentLoader(url string) {
	<div
		id="loader"
		hx-trigger="intersect, update"
		x-ref="loader"
		x-init="periodicIntersectUpdateObserver.observe($el)"
		hx-swap="outerHTML"
		hx-get={ url }
		hx-on:response-error="console.log('error', event.detail)"
	>
		<span class="htmx-indicator loading loading-spinner loading-sm"></span>
	</div>
}

templ buttonCommentLoader(url string) {
	<div
		x-data="{ loading: false }"
		id="loader"
		hx-swap="outerHTML"
		hx-get={ url }
		hx-on:response-error="console.log('error', event.detail)"
		x-on:htmx:before-request="loading = true"
		x-on:htmx:after-request="loading = false"
		class="pb-4 h-12 w-12 flex items-center "
		hx-trigger="get"
	>
		<span
			class="btn-sm mx-auto btn btn-outline btn-circle"
			x-on:click="htmx.trigger($el.parentElement, 'get')"
		>
			<span x-show="loading" class="loading loading-spinner loading-xs"></span>
			<span x-show="!loading">
				<svg class="h-4 w-4 object-cover" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" fill="none"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracurrentColorerCarrier" stroke-linecurrentcap="round" stroke-linejoin="round"></g><g id="SVGRepo_icurrentColoronCarrier"><path fill="currentColor" fill-rule="evenodd" d="M9 17a1 1 0 102 0v-6h6a1 1 0 100-2h-6V3a1 1 0 10-2 0v6H3a1 1 0 000 2h6v6z"></path> </g></svg>
			</span>
		</span>
	</div>
}

func commentCountURL(c CommentData) string {
	params := url.Values{}
	params.Add("parent", c.CommentID)
	return "/api/v1/comment/count/" + c.PostID + "?" + params.Encode()
}

func commentInputURL(c CommentData) string {
	params := url.Values{}
	params.Add("replying", c.CommentID)
	return "/api/v1/comment/send/" + c.PostID + "?" + params.Encode()
}
func loaderURL(comment CommentData) string {
	params := url.Values{}
	params.Add("parent", comment.CommentID)
	return "/api/v1/comment/get/" + comment.PostID + "?" + params.Encode()
}

func nextLoaderURL(comment CommentData) string {
	// fmt.Println(comment)
	params := url.Values{}
	params.Add("parent", comment.ParentID)
	params.Add("after", comment.CommentID)
	// fmt.Println(params.Encode())
	return "/api/v1/comment/get/" + comment.PostID + "?" + params.Encode()
}
